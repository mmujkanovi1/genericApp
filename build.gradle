plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
}

springBoot {
    buildInfo()
}


group = 'ba.barbers.shop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '3.0.5'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.5.3.Final'
    annotationProcessor group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.5.3.Final'
    implementation 'com.auth0:java-jwt:4.2.1'
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.3.0'
    testImplementation group: 'io.rest-assured', name: 'json-path', version: '5.3.0'
    implementation group: 'io.rest-assured', name: 'rest-assured-common', version: '5.3.0'
    testImplementation group: 'com.h2database', name: 'h2', version: '2.1.214'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootRun {
    systemProperty "spring.profiles.active", "prod"
    if (System.properties.containsKey('spring.profiles.active')) {
        systemProperty "spring.profiles.active", System.properties['spring.profiles.active']
    }
}


test {
    systemProperty 'spring.profiles.active', 'integration'
}

